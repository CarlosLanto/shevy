//////////////////////////////
// Shevy
// Version: 0.1.0
// Author: Kyle Shevlin
// Github: kyleshevlin
//////////////////////////////

// Shevy Default Map
//////////////////////////////
$shevy-defaults: (
  'base-font-size': 1em,
  'base-line-height': 1.5,
  'base-font-scale': (3, 2.5, 2, 1.5, 1.25, 1)
);

// User Settings
//////////////////////////////
$shevy: () !default;
$shevy: map-merge($shevy-defaults, $shevy);

// Functions
//////////////////////////////

// Get font size from the font-scale
@function get-font-scale-value($iterator, $a-map: $shevy) {
  @return nth(map-get($a-map, 'base-font-scale'), $iterator);
}

// Base Unit Multiplier
// Creates a 1(base-unit) to use for multiplying
@function base-unit-multiplier($unit) {
  @if $unit == 'px' {
    @return 1px;
  } @else if $unit == 'em' {
    @return 1em;
  } @else if $unit == 'rem' {
    @return 1rem;
  } @else {
    @warn "Sorry, but that's an unsupported unit of measure.";
  }
}

// Base-spacing
// allows the user to create spacing as multiples or dividends of the $base-spacing variable
@function base-spacing($factor: 1) {
  @return $_base-spacing * $factor;
}

// Headings
//////////////////////////////
@mixin headings($typo-map: $shevy) {
  // Merge defaults with provided map,
  $current-map: map-merge($shevy-defaults, $typo-map);

  // create private vars for map settings
  $_base-font-unit: unit(map-get($current-map, 'base-font-size'));
  $_base-unit-multiplier: base-unit-multiplier($_base-font-unit);
  $_base-font-size: map-get($current-map, 'base-font-size');
  $_base-line-height: map-get($current-map, 'base-line-height');
  $_base-spacing: $_base-font-size * $_base-line-height;
  $_font-scale-length: length(map-get($current-map, 'base-font-scale'));

  @for $i from 1 through $_font-scale-length {
    h#{$i} {
      // Font size is base-font-size * font-scale[index]
      font-size: $_base-font-size * get-font-scale-value($i, $current-map);

      // pxs and rems are different than ems
      @if $_base-font-unit == 'px' or $_base-font-unit == 'rem' {
        @if ((get-font-scale-value($i, $current-map) * $_base-font-size) <= $_base-spacing) {
          line-height: $_base-spacing;
        } @else {
          $x: 1;
          @while ($_base-spacing * $x) < (get-font-scale-value($i, $current-map) * $_base-font-size) {
            $x: $x + 1;
          }
          line-height: $_base-spacing * $x;
        }
      } @else if $_base-font-unit == 'em' {
        @if ((get-font-scale-value($i, $current-map) * $_base-unit-multiplier) <= $_base-spacing) {
          line-height: $_base-spacing / (get-font-scale-value($i, $current-map) * $_base-unit-multiplier); // * $_base-unit-multiplier removes base unit
        } @else {
          $y: 1;
          @while ($_base-spacing * $y) < (get-font-scale-value($i, $current-map) * $_base-unit-multiplier) {
            $y: $y + 1;
          }
          line-height: ($_base-spacing * $y) / (get-font-scale-value($i, $current-map) * $_base-unit-multiplier); // * $_base-unit-multiplier removes base unit
        }
      } @else {
        @warn "Sorry, but that's an unsupported unit of measure.";
      }

      @if $_base-font-unit == 'px' or $_base-font-unit == 'rem' {
        margin-bottom: $_base-spacing;
      } @else if $_base-font-unit == 'em' {
        margin-bottom: $_base-spacing / get-font-scale-value($i, $current-map);
      } @else {
        @warn "Sorry, but that's an unsupported unit of measure.";
      }
    }
  }
}

// Paragraphs
//////////////////////////////
@mixin paragraph($typo-map: $shevy) {
  // Merge defaults with provided map,
  $current-map: map-merge($shevy-defaults, $typo-map);

  // create private vars for map settings
  $_base-font-unit: unit(map-get($current-map, 'base-font-size'));
  $_base-font-size: map-get($current-map, 'base-font-size');
  $_base-line-height: map-get($current-map, 'base-line-height');
  $_base-spacing: $_base-font-size * $_base-line-height;
  $_font-scale-length: length(map-get($current-map, 'base-font-scale'));

  p {
    font-size: $_base-font-size * get-font-scale-value($_font-scale-length, $current-map);
    line-height: $_base-spacing / get-font-scale-value($_font-scale-length, $current-map);

    & + & {
      margin-top: $_base-spacing / get-font-scale-value($_font-scale-length, $current-map);
    }
  }
}
